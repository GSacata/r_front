CLONANDO E ATIVANDO O PROJETO
PASSO A PASSO
0. (Windows) Certifique-se de ter instalado em seu computador o Node.js e NPM, gerenciador de pacotes.
1. Em seu git bash, usar "git clone 'link_deste_repositorio'";
2. Em seu terminal, use os seguintes comandos entre aspas duplas, na ordem:
3. "Set-ExecutionPolicy Unrestricted -Scope Process" (caso seu computador não permita execuções de scripts 'externos', essa linha permitirá a execução enquanto o terminal estiver aberto);
4. Entre na pasta do projeto com "cd frontend";
5. Use o comando "npm install". O próprio gerenciador de pacotes vai buscar um arquivo chamado "package.json" e instalar as configurações contidas lá;
6. Caso não tenha instalado, use o comando "npm install -g @angular/cli" para poder usar linhas de comando próprias do Angular.
7. Rode o projeto em Angular com "ng serve -o";
8. Copie o link que aparecer, e insira em seu navegador de preferência. Durante o desenvolvimento do projeto, tal link foi "http://localhost:4200/". Ele abria automaticamente em meu navegador padrão;
FIM



ENUNCIADO
Este teste tem como objetivo avaliar suas habilidades nas linguagens Type Script e Python, utilizando os frameworks Angular 8, Django e Django Rest Framework. Também iremos avaliar suas habilidades em seguir tutoriais e aprendizado de novas tecnologias. Utilizando estes frameworks você deverá criar um aplicativo de TODO list.
Requerimentos
O frontend do aplicativo TODO list deve ser feito em Angular 8 no formato Single Page Application. Para o backend da aplicação deve ser utilizado o Django junto ao Django Rest Framework.
Todas as entradas do aplicativo devem ser salvas em um banco de dados (pode ser o SQLITE que vem como padrão no django e não há necessidade de instalar nenhum banco de dados). Quando a aplicação ser iniciada, caso hajam entradas já salvas no banco de dados as mesmas devem ser exibidas.
Funcionalidades
* Exibir a lista de TODOs
* Adicionar novos TODOs
* Remover TODOs
* Editar TODOs
* Marcar TODO como completo
* A aplicação deve conversar com o backend via JSONs



PASSOS
.Criar botão "MarkAsDone()", que quando clicado, vai trocar o ícone e marcar a tarefa como concluída, ou não concluída.


TESTES
Pelo back django REST (sem interação do front)
[-] (GET) Pegar tarefas geral e tarefas específicas.
[-] (POST) Criar uma tarefa, seguindo modelo correto
[-] (PUT) Atualizar uma tarefa.
[-] (DELETE) Apagar uma tarefa.

Pelo front angular
[ ] (GET) Pegar tarefas geral e tarefas específicas.
[ ] (POST) Criar uma tarefa, seguindo modelo correto
[ ] (PUT) Atualizar uma tarefa.
[ ] (DELETE) Apagar uma tarefa.



MELHORIAS
[ ] Enriquecer corpo de tarefa com descrição.
[-] Melhorar corpo da tarefa com ID (por favor, né)
[-] Refresh na página depois que um método for chamado, para dar um feedback mais imediato das mudanças.



REFERÊNCIAS
https://github.com/GSacata/tp-frontend.git
https://www.canva.com/colors/color-wheel/



NOTAS
Set-ExecutionPolicy Unrestricted -Scope Process
cd frontend
ng serve -o